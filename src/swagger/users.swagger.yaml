openapi: 3.0.1
info:
  title: Splitwise Clone - Users API
  description: API documentation for user-related endpoints.
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Local API server

tags:
  - name: Users
    description: Endpoints for user-related operations.

paths:
  /users/me:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Retrieve the profile of the currently logged-in user.
      security:
        - bearerAuth: [] # Requires a Bearer token for authorization
      responses:
        200:
          description: User profile fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '1'
                  username:
                    type: string
                    example: 'JohnDoe'
                  email:
                    type: string
                    example: 'johndoe@example.com'
                  profile_picture_url:
                    type: string
                    example: 'https://s3.example.com/johndoe.jpg'
        401:
          description: Unauthorized. Token is missing or invalid.

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update the profile of the currently logged-in user, including uploading a profile picture.
      security:
        - bearerAuth: [] # Requires a Bearer token for authorization
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'NewUsername'
                profile_image:
                  type: string
                  format: binary
      responses:
        200:
          description: User profile updated successfully.
        400:
          description: Bad request. Invalid data format.
        401:
          description: Unauthorized. Token is missing or invalid.

  /users/outstanding-balance:
    get:
      tags:
        - Users
      summary: Get outstanding balance
      description: Retrieve the outstanding balance of the currently logged-in user.
      security:
        - bearerAuth: [] # Requires a Bearer token for authorization
      responses:
        200:
          description: Outstanding balance fetched successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    example: 100.50
        401:
          description: Unauthorized. Token is missing or invalid.

  /users/friends:
    get:
      tags:
        - Users
      summary: Get user's friends list
      description: Retrieve a list of the user's friends.
      security:
        - bearerAuth: [] # Requires a Bearer token for authorization
      responses:
        200:
          description: Friends list retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '2'
                    username:
                      type: string
                      example: 'JaneDoe'
                    email:
                      type: string
                      example: 'janedoe@example.com'
        401:
          description: Unauthorized. Token is missing or invalid.

    post:
      tags:
        - Users
      summary: Add a friend
      description: Add a new friend to the user's friend list.
      security:
        - bearerAuth: [] # Requires a Bearer token for authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                friend_two:
                  type: string
                  example: '4043f90f-593b-46d5-8c09-3fde6a15be65'
      responses:
        201:
          description: Friend added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Friend added successfully.'
        400:
          description: Bad request. Friend could not be added.
        401:
          description: Unauthorized. Token is missing or invalid.

  /users/{userId}/payments:
    get:
      tags:
        - Users
      summary: Get all payments for a user
      description: Retrieve all payment transactions made by a specific user.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user whose payments are being retrieved.
          schema:
            type: string
            example: '123'
      responses:
        200:
          description: Payments fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: '1'
                    amount:
                      type: number
                      example: 250.75
                    date:
                      type: string
                      format: date
                      example: '2024-11-17'
                    description:
                      type: string
                      example: 'Dinner payment'
        401:
          description: Unauthorized. Token is missing or invalid.

  /users/generate-report:
    get:
      tags:
        - Users
      summary: Generate an expense report
      description: Generate a detailed report of all expenses for the logged-in user.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Report generated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Report generated successfully.'
                  reportId:
                    type: string
                    example: '5678'
        401:
          description: Unauthorized. Token is missing or invalid.

  /users/report-pdf:
    get:
      tags:
        - Users
      summary: Export expense report to PDF
      description: Generate and download a PDF version of the user's expense report.
      security:
        - bearerAuth: []
      responses:
        200:
          description: PDF report downloaded successfully.
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        401:
          description: Unauthorized. Token is missing or invalid.

  /users/reports:
    get:
      tags:
        - Users
      summary: Get all expense reports
      description: Retrieve all generated expense reports for the logged-in user.
      security:
        - bearerAuth: []
      responses:
        200:
          description: Reports fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    reportId:
                      type: string
                      example: '5678'
                    generatedAt:
                      type: string
                      format: date-time
                      example: '2024-11-16T12:00:00Z'
                    description:
                      type: string
                      example: 'Monthly Expense Report'
        401:
          description: Unauthorized. Token is missing or invalid.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
