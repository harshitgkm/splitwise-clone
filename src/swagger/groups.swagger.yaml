openapi: 3.0.0
info:
  title: Groups API
  description: API for managing groups, including creating, updating, and managing members, payments, and reports.
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: Groups
    description: Endpoints for managing groups and their members

paths:
  /groups:
    post:
      tags:
        - Groups
      summary: Create a new group
      description: Create a new group with the authenticated user as the admin.
      requestBody:
        description: The group data to be created
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
              properties:
                name:
                  type: string
                  example: 'Friends Trip'
                type:
                  type: string
                  example: 'private'
                profile_image_url:
                  type: string
                  example: 'https://s3.amazonaws.com/bucket-name/path/to/image.jpg'
      security:
        - bearerAuth: []
      responses:
        201:
          description: Group created successfully.
          content:
            application/json:
        400:
          description: Invalid request data.

    get:
      tags:
        - Groups
      summary: Get all groups of the authenticated user
      description: Retrieve all groups that the authenticated user is a member of.
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of groups
          content:
            application/json:
              type: array
        401:
          description: Unauthorized. Token is missing or invalid.

  /groups/{groupId}:
    put:
      tags:
        - Groups
      summary: Update group information
      description: Update the details of an existing group.
      parameters:
        - name: groupId
          in: path
          required: true
          description: The ID of the group to update
          schema:
            type: string
            example: '1'
      requestBody:
        description: The updated group data
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Updated Group Name'
                type:
                  type: string
                  example: 'private'
                profile_image_url:
                  type: string
                  example: 'https://s3.amazonaws.com/bucket-name/path/to/new-image.jpg'
      security:
        - bearerAuth: []
      responses:
        200:
          description: Group updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          description: Invalid request data
        401:
          description: Unauthorized. Token is missing or invalid.
        404:
          description: Group not found.

    delete:
      tags:
        - Groups
      summary: Delete a group
      description: Delete an existing group.
      parameters:
        - name: groupId
          in: path
          required: true
          description: The ID of the group to delete
          schema:
            type: string
            example: '1'
      security:
        - bearerAuth: []
      responses:
        200:
          description: Group deleted successfully
        401:
          description: Unauthorized. Token is missing or invalid.
        404:
          description: Group not found.

  /groups/{groupId}/addMember:
    post:
      tags:
        - Groups
      summary: Add a new member to the group
      description: Add a member to the group, with the option to assign admin role.
      parameters:
        - name: groupId
          in: path
          required: true
          description: The ID of the group to which the user will be added
          schema:
            type: string
            example: '1'
      requestBody:
        description: Data of the user to add
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  example: '456'
                isAdmin:
                  type: boolean
                  example: true
      security:
        - bearerAuth: []
      responses:
        200:
          description: User added to group successfully
        400:
          description: Invalid user or group
        401:
          description: Unauthorized. Token is missing or invalid.

  /groups/{groupId}/leave:
    post:
      tags:
        - Groups
      summary: Leave a group
      description: Allow a user to leave a group.
      parameters:
        - name: groupId
          in: path
          required: true
          description: The ID of the group the user wants to leave
          schema:
            type: string
            example: '1'
      security:
        - bearerAuth: []
      responses:
        200:
          description: User successfully left the group
        401:
          description: Unauthorized. Token is missing or invalid.
        404:
          description: Group not found.

  /groups/{groupId}/{userId}/remove:
    delete:
      tags:
        - Groups
      summary: Remove a user from the group
      description: Remove a user from the group, can only be performed by the group admin.
      parameters:
        - name: groupId
          in: path
          required: true
          description: The ID of the group from which the user will be removed
          schema:
            type: string
            example: '1'
        - name: userId
          in: path
          required: true
          description: The ID of the user to remove
          schema:
            type: string
            example: '456'
      security:
        - bearerAuth: []
      responses:
        200:
          description: User removed from the group
        401:
          description: Unauthorized. Token is missing or invalid.
        404:
          description: User or group not found.

  /groups/{groupId}/payments:
    get:
      tags:
        - Groups
      summary: Get all payments for a group
      description: Retrieve all payment records for a specific group.
      parameters:
        - name: groupId
          in: path
          required: true
          description: The ID of the group to retrieve payments for
          schema:
            type: string
            example: '1'
      security:
        - bearerAuth: []
      responses:
        200:
          description: Payments fetched successfully
          content:
            application/json:
              type: array
              items:
                $ref: '#/components/schemas/Payment'
        401:
          description: Unauthorized. Token is missing or invalid.
        404:
          description: Group not found.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
